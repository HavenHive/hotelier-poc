// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum userRole {
  admin
  member
  owner
  user
}

enum roomType {
  STANDARD
  DELUXE
  SUITE
  PRESIDENTIAL
}

enum invitationStatus {
  PENDING
  ACCEPTED
  REJECTED
  EXPIRED
}

model user {
  id            String       @id @default(cuid())
  email         String       @unique
  name          String?
  emailVerified Boolean
  image         String?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  role          userRole     @default(user)
  banned        Boolean      @default(false)
  banReason     String?
  banExpires    DateTime?
  invitation    invitation[]
  session       session[]
  account       account[]

  @@map("user")
}

model session {
  id                   String   @id
  expiresAt            DateTime
  ipAddress            String?
  userAgent            String?
  userId               String
  user                 user     @relation(fields: [userId], references: [id], onDelete: Cascade)
  activeOrganizationId String?
  impersonatedBy       String?

  token     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([token])
  @@map("session")
}

model account {
  id           String    @id
  accountId    String
  providerId   String
  userId       String
  user         user      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken  String?
  refreshToken String?
  idToken      String?
  expiresAt    DateTime?
  password     String?

  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@map("account")
}

model verification {
  id         String   @id
  identifier String
  value      String
  expiresAt  DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("verification")
}

model room {
  id             String       @id @default(cuid())
  organizationId String
  organization   organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  roomNumber     String
  type           roomType
  price          Float
  available      Boolean      @default(true)
  metadata       Json?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@unique([organizationId, roomNumber])
  @@map("room")
}

model member {
  id             String       @id
  organizationId String
  organization   organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  userId         String
  role           userRole
  createdAt      DateTime     @default(now())

  @@map("member")
}

model invitation {
  id             String           @id
  organizationId String
  organization   organization     @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  email          String
  role           userRole?
  status         invitationStatus
  expiresAt      DateTime
  inviterId      String
  user           user             @relation(fields: [inviterId], references: [id], onDelete: Cascade)

  @@map("invitation")
}

model organization {
  id         String       @id
  name       String
  slug       String?
  logo       String?
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  metadata   Json?
  invitation invitation[]
  room       room[]
  member     member[]

  @@unique([slug])
  @@map("organization")
}
